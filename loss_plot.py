import os
from PIL import Image
import numpy as np
import torch
import torchvision
from torch.utils.tensorboard import SummaryWriter

ssim_loss_data= [1.1551661, 1.0706915, 1.1548801, 0.9350026, 1.2899063, 1.1336447, 0.9573732, 0.7545943, 0.6455116, 0.6095072, 0.5278862, 0.5693136, 0.5004722, 0.5410617, 0.4163749, 0.4110342, 0.4787493, 0.3730388, 0.4407915, 0.3534228, 0.4013317, 0.3533704, 0.3646780, 0.3000052, 0.2942118, 0.3020675, 0.2958417, 0.3135157, 0.2408134, 0.3079360, 0.2812118, 0.2577288, 0.2316894, 0.2260895, 0.2817091, 0.2381121, 0.2485517, 0.1945436, 0.1778349, 0.2278886, 0.1784397, 0.2190278, 0.1805004, 0.2615836, 0.1900988, 0.1916996, 0.1911587, 0.1903314, 0.1619484, 0.1663060, 0.1738528, 0.2279080, 0.1700820, 0.1647971, 0.1700148, 0.1598141, 0.1535089, 0.1600010, 0.1737729, 0.1554154, 0.1550743, 0.1868602, 0.1797108, 0.1373270, 0.1607006, 0.1446404, 0.1241183, 0.1363935, 0.1409309, 0.1352156, 0.1186424, 0.1526041, 0.1436856, 0.1764806, 0.1348970, 0.1608965, 0.1279304, 0.1407670, 0.1191845, 0.1215293, 0.1216306, 0.1371890, 0.1010674, 0.1058069, 0.1034549, 0.1431293, 0.1018159, 0.1031292, 0.0977719, 0.1037694, 0.1328009, 0.1039830, 0.1227188, 0.1298572, 0.1214016, 0.1027691, 0.1301954, 0.1204952, 0.0981132, 0.0940379, 0.1122003, 0.1147450, 0.1050905, 0.1140608, 0.0988166, 0.1097642, 0.0802933, 0.1106313, 0.0801844, 0.0966185, 0.0865176, 0.0701165, 0.0789319, 0.1009887, 0.0741578, 0.0925667, 0.0892375, 0.0799952, 0.0854770, 0.1006529, 0.0727939, 0.0902182, 0.0877887, 0.1063964, 0.1033004, 0.1187491, 0.0977583, 0.0789661, 0.0763914, 0.0933930, 0.0708650, 0.0927883, 0.0834735, 0.0911077, 0.0855441, 0.0758820, 0.0788648, 0.0695977, 0.0751283, 0.0802189, 0.0920735, 0.0770751, 0.0905893, 0.0796908, 0.0688232, 0.0945599, 0.0674690, 0.0818206, 0.0681408, 0.0705026, 0.0644474, 0.0781972, 0.0569977]
original_loss_data = [1.6987273, 0.6977449, 0.6039980, 0.4789683, 0.3494672, 0.3512200, 0.2063970, 0.1690097, 0.1584716, 0.1755637, 0.1200832, 0.2794120, 0.1180517, 0.1382807, 0.0961426, 0.0876007, 0.1064950, 0.0832839, 0.1176785, 0.0979776, 0.0719730, 0.0754950, 0.0866750, 0.0491740, 0.0410653, 0.0549303, 0.0580255, 0.0504259, 0.0376269, 0.0509899, 0.0321237, 0.0385384, 0.0356564, 0.0345904, 0.0510425, 0.0333940, 0.0387365, 0.0248598, 0.0228057, 0.0291123, 0.0331832, 0.0319614, 0.0289559, 0.0555141, 0.0289273, 0.0274096, 0.0223924, 0.0270387, 0.0190502, 0.0257528, 0.0230799, 0.0554124, 0.0219630, 0.0331707, 0.0212579, 0.0416338, 0.0207173, 0.0172898, 0.0237196, 0.0296384, 0.0153787, 0.0372657, 0.0249311, 0.0159667, 0.0224329, 0.0183113, 0.0212655, 0.0237749, 0.0261665, 0.0181492, 0.0152709, 0.0208316, 0.0186401, 0.0201838, 0.0160888, 0.0179486, 0.0168315, 0.0196595, 0.0169900, 0.0174343, 0.0139760, 0.0196514, 0.0140164, 0.0133140, 0.0156415, 0.0213422, 0.0159802, 0.0178907, 0.0105377, 0.0192962, 0.0158775, 0.0126209, 0.0171968, 0.0158263, 0.0130109, 0.0117611, 0.0123317, 0.0185085, 0.0116594, 0.0111419, 0.0122123, 0.0116662, 0.0138203, 0.0138150, 0.0143001, 0.0095346, 0.0091141, 0.0126562, 0.0092498, 0.0129104, 0.0127767, 0.0085897, 0.0093133, 0.0095011, 0.0085533, 0.0104515, 0.0121119, 0.0099089, 0.0109587, 0.0094721, 0.0078187, 0.0113444, 0.0166585, 0.0116421, 0.0101456, 0.0092000, 0.0122731, 0.0085469, 0.0103432, 0.0068227, 0.0063918, 0.0124071, 0.0111181, 0.0144719, 0.0086309, 0.0070728, 0.0126384, 0.0103568, 0.0085326, 0.0106019, 0.0086409, 0.0122871, 0.0089416, 0.0069070, 0.0103223, 0.0112850, 0.0107225, 0.0110982, 0.0069319, 0.0083217, 0.0079561, 0.0060743, 0.0105429]

def plot_loss():
	writer = SummaryWriter("./runs")
	for ep in range(149):
		ssim_loss = ssim_loss_data[ep]
		original_loss = original_loss_data[ep]
		writer.add_scalar("Original loss", np.array(original_loss), ep)
		writer.add_scalar("SSIM loss", np.array(ssim_loss), ep)
		if ep%10 == 0:
			target_dir = "./TestResults/ep{}/images".format(ep+10)
			for file in os.listdir(target_dir):
				img_path = os.path.join(target_dir, file)
				img = Image.open(img_path).convert('RGB')
				img_tensor = torchvision.transforms.ToTensor()(img)
				writer.add_image(file, img_tensor, ep)
		print("Logged Results for epoch ", ep)

if __name__ == "__main__":
	plot_loss()